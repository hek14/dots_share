
# ████████╗███╗   ███╗██╗   ██╗██╗  ██╗
# ╚══██╔══╝████╗ ████║██║   ██║╚██╗██╔╝
#    ██║   ██╔████╔██║██║   ██║ ╚███╔╝
#    ██║   ██║╚██╔╝██║██║   ██║ ██╔██╗
#    ██║   ██║ ╚═╝ ██║╚██████╔╝██╔╝ ██╗
#    ╚═╝   ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝
# Terminal multiplexer
# https://github.com/tmux/tmux


set-option -g allow-passthrough on

set -g default-terminal 'screen-256color' # "xterm-kitty"
set -g terminal-overrides ',xterm-256color:RGB'
set -g automatic-rename off # rename window to reflect current program
# set -g automatic-rename-format "#($HOME/.tmux/tmux-icon-name #{pane_current_command})"

set -g detach-on-destroy on  # don't exit from tmux when closing a session 
set -g mouse on
set -g set-clipboard on
set -g renumber-windows on  # renumber windows when a window is closed
set -g history-limit 1000000
set -g base-index 1
set -g set-titles on # set terminal title
set -g set-titles-string '#h ❐ #S ● #I #W'
set -g escape-time 0  # reduce the time when type prefix
set -g repeat-time 0
set -g aggressive-resize on

# refer to https://linuxhint.com/customizing-status-bar-tmux/
set -g status-style                 'bg=default' # transparent
set -g status-interval 2      # update status every 2 seconds
set -g status-left-length 20 # increase status line length
set -g status-right-length 140
set -g status-position top    # macOS / darwin style
if-shell "uname | grep -q Linux" 'set -g status-right "#[fg=blue,bold,bg=default,bright]#($TMUX_PLUGIN_MANAGER_PATH/tmux-mem-cpu-load/tmux-mem-cpu-load --interval 2 -a 0 -g 0)"'
if-shell "uname | grep -q Linux" "set -ga status-right '#[fg=black,bold,bg=cyan]%H:%M %y-%d-%m  '"

# if-shell "uname | grep -q Darwin" 'set -g status-right "#[fg=blue,bold,bg=default,bright]#($TMUX_PLUGIN_MANAGER_PATH/tmux-mem-cpu-load/tmux-mem-cpu-load --interval 2 -a 0 -g 0)"'
# if-shell "uname | grep -q Darwin" "set -ga status-right '#[fg=black,bold,bg=cyan]%H:%M %y-%d-%m  '"
if-shell "uname | grep -q Darwin" "set -g status-right '#[fg=black,bold,bg=cyan]  '"
set -g status-left                  '#[fg=blue,bold]#S ' # show the session name at the leftmost
# set -ga status-left                 "#(gitmux -cfg $HOME/.tmux/gitmux.conf '#{pane_current_path}')"

set -g status "on"
set -g status-style 'fg=white'
set -g status-position top 
set -g status-left-length 50
set -g status-left "#[fg=#{?client_prefix,${thm_yellow},${thm_fg}},bg=${thm_bg_dark}]#S#[fg=${thm_fg},bg=default] ▸ " # session name
set -g status-right-length 0 
set -g status-right ""
# set -g status-right-length 50
# set -g status-right "#[fg=${thm_gray}][ #{client_last_session}]"
set -g status-justify left
set -g status-interval 1

# set terminal title
set -g set-titles on
set -g set-titles-string "#S / #W"

set -g pane-active-border-style     'fg=white,bg=default'
set -g pane-border-style            'fg=brightblack,bg=default'

setw -g window-status-format "#[fg=gray] - #I: #W "
setw -g window-status-current-format "#[fg=colour255,bg=colour27,bold] * #I: #W #[default]"
setw -g window-status-separator "|"


# check the environment after re-attack
set -g update-environment "SSH_AUTH_SOCK \
      SSH_CONNECTION \
      DISPLAY"
set-option -g -a update-environment "LC_CLIPPY"

# binds
unbind C-b
unbind '"'
unbind %
set -g prefix C-v
set -g mode-keys vi
bind \\ split-window -h -c "#{pane_current_path}" -p 50
bind - split-window -v -c "#{pane_current_path}" -p 50
bind v split-window -h -c "#{pane_current_path}" -p 50
bind s split-window -v -c "#{pane_current_path}" -p 50
bind S split-window -h -c "#{pane_current_path}" -p 50
bind x kill-pane # skip "kill-pane 1? (y/n)" prompt (cmd+w)

# switch window
bind h select-pane -L
bind n select-pane -D
bind e select-pane -U
bind i select-pane -R
bind u next-window
bind l previous-window

bind C-h select-pane -L
bind C-n select-pane -D
bind C-e select-pane -U
bind C-i select-pane -R
bind C-u next-window
bind C-l previous-window

bind . last-window

# change the window size
bind -r H resize-pane -L 10
bind -r N resize-pane -D 10
bind -r E resize-pane -U 10
bind -r I resize-pane -R 10
# bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
# reload the tmux config
bind r source-file ~/.tmux.conf \; display "Configuration Reloaded"
bind C-v send-keys "C-v"

bind-key -T copy-mode-vi WheelUpPane send -N3 -X scroll-up
bind-key -T copy-mode-vi WheelDownPane send -N3 -X scroll-down
bind g new-window -c '#{pane_current_path}' lazygit
bind f new-window -c '#{pane_current_path}' lf
bind c new-window -c '#{pane_current_path}'

# colemak stuff
bind-key -T copy-mode-vi n send-keys -X cursor-down
bind-key -T copy-mode-vi e send-keys -X cursor-up
bind-key -T copy-mode-vi i send-keys -X cursor-right
bind-key -T copy-mode-vi k send-keys -X search-again
bind-key -T copy-mode-vi K send-keys -X search-reverse
bind-key -T copy-mode-vi j send-keys -X next-word-end
bind-key -T copy-mode-vi J send-keys -X next-space-end
bind-key -T copy-mode-vi c-n send-keys -X copy-selection
bind-key -T choice-mode n send-keys -X down
bind-key -T choice-mode e send-keys -X up
bind-key -T choice-mode c-n send-keys -X choose
bind-key -T edit-mode-vi c-n send-keys -X enter

## clippy
bind ] run "tmux set-buffer \"$(clippy get)\"; tmux paste-buffer"
bind -T copy-mode-vi y run "tmux save-buffer - | clippy set" # move tmux copy buffer into x clipboard
bind -T copy-mode-emacs y run "tmux save-buffer - | clippy set"

# ====== tmux navigator
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-Left' if-shell "$is_vim" 'send-keys C-Left' 'select-pane -L'
bind-key -n 'C-Down' if-shell "$is_vim" 'send-keys C-Down' 'select-pane -D'
bind-key -n 'C-Up' if-shell "$is_vim" 'send-keys C-Up' 'select-pane -U'
bind-key -n 'C-Right' if-shell "$is_vim" 'send-keys C-Right' 'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"
bind-key -n 'C-Space' if-shell "$is_vim" 'send-keys C-Space' 'select-pane -t:.+'
bind-key -T copy-mode-vi 'C-Left' select-pane -L
bind-key -T copy-mode-vi 'C-Down' select-pane -D
bind-key -T copy-mode-vi 'C-Up' select-pane -U
bind-key -T copy-mode-vi 'C-Right' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l
bind-key -T copy-mode-vi 'C-Space' select-pane -t:.+
# ========== END

bind-key P command-prompt -p 'save history to filename:' -I '~/tmux.history' 'capture-pane -S -32768 ; save-buffer %1 ; delete-buffer'

# ============================
# ===       Plugins        ===
# prefix + I (install)
# prefix + U (update)
# prefix + alt + u (uninstall)
# ============================
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"
set-environment -g TMUX_PLUGIN_MANAGER_PATH "$HOME/.tmux/plugins"

# set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @fzf-url-bind 'p'
set -g @fzf-url-fzf-options '-w 50% -h 50% --prompt="   " --border-label=" Open URL "'
set -g @fzf-url-history-limit '2000'
set -g @plugin 'joshmedeski/tmux-fzf-url'
set -g @plugin 'joshmedeski/t-smart-tmux-session-manager'
bind-key t run-shell "$TMUX_PLUGIN_MANAGER_PATH/t-smart-tmux-session-manager/bin/t"
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'thewtex/tmux-mem-cpu-load'
set -g @plugin 'jimeh/tmuxifier'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
